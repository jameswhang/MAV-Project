cmake_minimum_required(VERSION 2.8.3)
project(obj_test)
add_definitions("-x c++")

find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
  cmake_modules
  geometry_msgs
  message_generation
)

set(CMAKE_C_FLGAS "-std=gnu++11")
set (CMAKE_CXX_FLAGS "-std=c++11 -mcpu=cortex-a8 -O3 -Ofast -mfloat-abi=hard -ftree-vectorize -ftree-vectorizer-verbose=9 -I/opt/opencv3/include -I/usr/include/eigen3 -I/home/odroid/OpenNI-Linux-Arm-2.2/Include -Wall ")
set(CMAKE_CXX_LINK_FLAGS "-L/opt/opencv3/lib -L/usr/lib -L/home/odroid/OpenNI-Linux-Arm-2.2/Redist")


find_package(Eigen REQUIRED) 
include_directories( ${Eigen_INCLUDE_DIRS} )
add_definitions(${EIGEN_DEFINITIONS})

#find_package(Ope REQUIRED)
add_message_files(
    FILES
    MoveCommand.msg
    JoyCommand.msg
 )

generate_messages(
   DEPENDENCIES
   geometry_msgs
   std_msgs
 )

catkin_package(
  INCLUDE_DIRS include
  LIBRARIES obj_test
  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime
  DEPENDS system_lib
)


include_directories(
  include
  ${catkin_SOURCE_DIRS}
  ${catkin_INCLUDE_DIRS}
  ${Eigen_INCLUDE_DIRS}
  /usr/include/eigen3
  /home/odroid/OpenNI-Linux-Arm-2.2/Include
  /opt/opencv3/include
)

link_directories(
/opt/opencv3/lib
/home/odroid/catkin_ws/devel/.private/rgbd_slam/lib/
/usr/lib
/home/odroid/OpenNI-Linux-Arm-2.2/Redist
/opt/ros/indigo/lib/
)




add_library(
SURF
src/SURF.cpp 
src/OrbDetSurfDesc.cpp
src/SIFT.cpp 
src/AsusProLiveOpenNI2.cpp
src/Frame.cpp
)

target_link_libraries(SURF
${catkin_LIBRARIES}
boost_system
boost_thread
pthread
OpenNI2
opencv_core
opencv_highgui
opencv_calib3d
opencv_xfeatures2d
opencv_features2d
opencv_flann
opencv_videoio
opencv_imgproc
opencv_imgcodecs
)


add_executable(test01 src/test01.cpp src/SURF.cpp src/Frame.cpp src/AsusProLiveOpenNI2.cpp)
target_link_libraries(test01 ${catkin_LIBRARIES} SURF)

#add_executable(TestFly1 src/TestFly1.cpp)
#target_link_libraries(TestFly1 ${catkin_LIBRARIES} SURF)

##add_executable(TestFly2 src/TestFly2.cpp)
##target_link_libraries(TestFly2 ${catkin_LIBRARIES} SURF)

add_executable(TestFly3 src/TestFly3.cpp)
target_link_libraries(TestFly3 ${catkin_LIBRARIES} SURF)

##add_executable(TestFly4 src/TestFly4.cpp)
##target_link_libraries(TestFly4 ${catkin_LIBRARIES} SURF)

##add_executable(TestFly5 src/TestFly5.cpp)
##target_link_libraries(TestFly5 ${catkin_LIBRARIES} SURF)

##add_executable(TestFly6 src/TestFly6.cpp)
##target_link_libraries(TestFly6 ${catkin_LIBRARIES} SURF)

##add_executable(FinalFly src/FinalFly.cpp)
##target_link_libraries(FinalFly ${catkin_LIBRARIES} SURF)

