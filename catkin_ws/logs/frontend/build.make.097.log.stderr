/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp: In function ‘int main(int, char**)’:
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:287:41: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    if (slam.getImuCompensateCounter()== badFrameCnt)
                                         ^
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:290:8: error: no match for ‘operator=’ (operand types are ‘Eigen::Isometry3f {aka Eigen::Transform<float, 3, 1>}’ and ‘const Isometry3d {aka const Eigen::Transform<double, 3, 1>}’)
     tm = slam.getCurrentPosition();
        ^
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:290:8: note: candidates are:
In file included from /usr/include/eigen3/Eigen/Geometry:42:0,
                 from /home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/include/Frontend.h:16,
                 from /home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:15:
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:260:21: note: Eigen::Transform<Scalar, Dim, Mode, _Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::Transform<Scalar, Dim, Mode, _Options>&) [with _Scalar = float; int _Dim = 3; int _Mode = 1; int _Options = 0]
   inline Transform& operator=(const Transform& other)
                     ^
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:260:21: note:   no known conversion for argument 1 from ‘const Isometry3d {aka const Eigen::Transform<double, 3, 1>}’ to ‘const Eigen::Transform<float, 3, 1>&’
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:278:21: note: template<class OtherDerived> Eigen::Transform<Scalar, Dim, Mode, _Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::EigenBase<OtherDerived>&) [with OtherDerived = OtherDerived; _Scalar = float; int _Dim = 3; int _Mode = 1; int _Options = 0]
   inline Transform& operator=(const EigenBase<OtherDerived>& other)
                     ^
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:278:21: note:   template argument deduction/substitution failed:
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:290:8: note:   ‘const Isometry3d {aka const Eigen::Transform<double, 3, 1>}’ is not derived from ‘const Eigen::EigenBase<Derived>’
     tm = slam.getCurrentPosition();
        ^
In file included from /usr/include/eigen3/Eigen/Geometry:42:0,
                 from /home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/include/Frontend.h:16,
                 from /home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:15:
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:344:14: note: template<class OtherDerived> Eigen::Transform<Scalar, Dim, Mode, _Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::ReturnByValue<OtherDerived>&) [with OtherDerived = OtherDerived; _Scalar = float; int _Dim = 3; int _Mode = 1; int _Options = 0]
   Transform& operator=(const ReturnByValue<OtherDerived>& other)
              ^
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:344:14: note:   template argument deduction/substitution failed:
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:290:8: note:   ‘const Isometry3d {aka const Eigen::Transform<double, 3, 1>}’ is not derived from ‘const Eigen::ReturnByValue<Derived>’
     tm = slam.getCurrentPosition();
        ^
In file included from /usr/include/eigen3/Eigen/Geometry:42:0,
                 from /home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/include/Frontend.h:16,
                 from /home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:15:
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:941:44: note: Eigen::Transform<Scalar, Dim, Mode, Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const TranslationType&) [with _Scalar = float; int _Dim = 3; int _Mode = 1; int _Options = 0; Eigen::Transform<Scalar, Dim, Mode, _Options>::TranslationType = Eigen::Translation<float, 3>]
 inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const TranslationType& t)
                                            ^
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:941:44: note:   no known conversion for argument 1 from ‘const Isometry3d {aka const Eigen::Transform<double, 3, 1>}’ to ‘const TranslationType& {aka const Eigen::Translation<float, 3>&}’
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:958:44: note: Eigen::Transform<Scalar, Dim, Mode, Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::UniformScaling<_Scalar>&) [with _Scalar = float; int _Dim = 3; int _Mode = 1; int _Options = 0]
 inline Transform<Scalar,Dim,Mode,Options>& Transform<Scalar,Dim,Mode,Options>::operator=(const UniformScaling<Scalar>& s)
                                            ^
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:958:44: note:   no known conversion for argument 1 from ‘const Isometry3d {aka const Eigen::Transform<double, 3, 1>}’ to ‘const Eigen::UniformScaling<float>&’
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:543:21: note: template<class Derived> Eigen::Transform<Scalar, Dim, Mode, Options>& Eigen::Transform<Scalar, Dim, Mode, _Options>::operator=(const Eigen::RotationBase<Derived, Dim>&) [with Derived = Derived; _Scalar = float; int _Dim = 3; int _Mode = 1; int _Options = 0]
   inline Transform& operator=(const RotationBase<Derived,Dim>& r);
                     ^
/usr/include/eigen3/Eigen/src/Geometry/Transform.h:543:21: note:   template argument deduction/substitution failed:
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:290:8: note:   ‘const Isometry3d {aka const Eigen::Transform<double, 3, 1>}’ is not derived from ‘const Eigen::RotationBase<Derived, 3>’
     tm = slam.getCurrentPosition();
        ^
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:316:40: error: no matching function for call to ‘Backend::setNewNode(SLAM::Frame&, Eigen::Isometry3f&, Eigen::Matrix<float, 6, 6>&, int)’
      backend.setNewNode(frame, tm, im,1);
                                        ^
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:316:40: note: candidate is:
In file included from /home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/src/main.cpp:26:0:
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/include/Backend.h:27:7: note: void Backend::setNewNode(const SLAM::Frame&, const Matrix4f&, const Eigen::Matrix<float, 6, 6>&, uint8_t)
  void setNewNode(const Frame& frame, const Eigen::Matrix4f& tm, const Eigen::Matrix<float, 6, 6>& im, uint8_t toNode); // copy
       ^
/home/tuofeichen/SLAM/MAV-Project/catkin_ws/src/frontend/include/Backend.h:27:7: note:   no known conversion for argument 2 from ‘Eigen::Isometry3f {aka Eigen::Transform<float, 3, 1>}’ to ‘const Matrix4f& {aka const Eigen::Matrix<float, 4, 4>&}’
make[2]: *** [CMakeFiles/frontend.dir/src/main.cpp.o] Error 1
make[1]: *** [CMakeFiles/frontend.dir/all] Error 2
make: *** [all] Error 2
